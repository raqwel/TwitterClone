

/* Create Tables */

CREATE TABLE FAVOLITE
(
	FAVOLITE_ID BIGINT NOT NULL UNIQUE AUTO_INCREMENT COMMENT 'お気に入りID : お気に入りID',
	USER_ID BIGINT NOT NULL COMMENT '会員ID : 会員ID
',
	TWEET_ID BIGINT NOT NULL COMMENT 'ツイートID : お気に入りしたツイートID
',
	DEL_FLG BOOLEAN NOT NULL COMMENT '削除フラグ : 削除フラグ
物理削除は怖いので論理削除を想定',
	REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時 : お気に入りした時間',
	UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時 : 更新日時
',
	PRIMARY KEY (FAVOLITE_ID)
) COMMENT = 'お気に入り';


CREATE TABLE FOLLOW
(
	FOLLOW_ID BIGINT NOT NULL UNIQUE AUTO_INCREMENT COMMENT 'フォローID : フォローID',
	FOLLOWEE_ID BIGINT NOT NULL COMMENT 'フォロイーID : フォロイーID
フォローする人の会員IDが入る
',
	FOLLOWER_ID BIGINT NOT NULL COMMENT 'フォロワーID : フォロワーID
フォローされる人のIDが入る',
	DEL_FLG BOOLEAN NOT NULL COMMENT '削除フラグ : 削除フラグ
フォローされているかをT / Fで判定する
',
	REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時 : フォローした日時',
	UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時 : 更新日時',
	PRIMARY KEY (FOLLOW_ID),
	CONSTRAINT UQ_NEW_TABLE_XXX UNIQUE (FOLLOWEE_ID, FOLLOWER_ID)
) COMMENT = 'フォロー';


CREATE TABLE REPLY
(
	REPLY_ID BIGINT NOT NULL UNIQUE AUTO_INCREMENT COMMENT 'リプライID : リプライID',
	REPLYEE_ID BIGINT NOT NULL COMMENT 'リプライした会員ID : リプライした会員ID
',
	REPLYER_ID BIGINT NOT NULL COMMENT 'リプライされた会員ID : リプライされた会員のID',
	REPLYEE_TWEET_ID BIGINT NOT NULL COMMENT 'リプライしたツイートID : リプライしたツイートのID
',
	REPLYER_TWEET_ID BIGINT NOT NULL COMMENT 'リプライされたツイートID : リプライされたツイートのID',
	DEL_FLG BOOLEAN NOT NULL COMMENT '削除フラグ : 削除フラグ
物理削除は怖いので論理削除を想定',
	REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時 : リプライした日時',
	UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時 : 更新日時',
	PRIMARY KEY (REPLY_ID)
) COMMENT = 'リプライ';


CREATE TABLE RETWEET
(
	RETWEET_ID BIGINT NOT NULL UNIQUE AUTO_INCREMENT COMMENT 'リツイートID : リツイートID',
	USER_ID BIGINT NOT NULL COMMENT '会員ID : 会員ID
リツイートする人の会員IDが入る
',
	TWEET_ID BIGINT NOT NULL COMMENT 'ツイートID : ツイートID
リツイートされるツイートIDが格納される',
	DEL_FLG BOOLEAN NOT NULL COMMENT '削除フラグ : 削除フラグ
リツイートしたかどうかを見る
一回リツイートして辞めてもう一回リツイートをするときにTにして表示できるようにする
',
	REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時 : 登録日時',
	UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時 : 更新日時',
	PRIMARY KEY (RETWEET_ID),
	CONSTRAINT UQ_NEW_TABLE_XXX UNIQUE (USER_ID, TWEET_ID)
) COMMENT = 'リツイート';


CREATE TABLE TWEET
(
	TWEET_ID BIGINT NOT NULL UNIQUE AUTO_INCREMENT COMMENT 'ツイートID : ツイートID',
	USER_ID BIGINT NOT NULL COMMENT '会員ID : 会員ID
',
	TWEET VARCHAR(140) NOT NULL COMMENT 'ツイート : ツイート
140文字制限されているので最大長140に設定',
	DEL_FLG BOOLEAN NOT NULL COMMENT '削除フラグ : 削除フラグ
物理削除は怖いので論理削除を想定',
	REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時 : ツイートした時間',
	UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時 : 更新日時',
	PRIMARY KEY (TWEET_ID)
) COMMENT = 'ツイート';


CREATE TABLE USER
(
	USER_ID BIGINT NOT NULL UNIQUE AUTO_INCREMENT COMMENT '会員ID : 会員ID',
	USER_NAME VARCHAR(64) NOT NULL COMMENT '会員名称 : 会員名称。
このデータが名前として表示される。',
	PASSWORD VARCHAR(30) NOT NULL COMMENT 'パスワード : パスワード',
	MAIL_ADDRESS VARCHAR(255) NOT NULL UNIQUE COMMENT 'メールアドレス : メールアドレス',
	BIRTH_DATE DATE COMMENT '誕生日 : 誕生日
時間までは考慮しない
特に入力する必要もないのでNULLを許容する',
	PROFILE_SENTENCE VARCHAR(200) NOT NULL COMMENT 'プロフィール文 : プロフィール文
長いのも困るので300文字',
	REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時 : 登録日時
ユーザがサービスに登録した日時を格納する',
	UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時 : 更新日時
',
	PRIMARY KEY (USER_ID)
) ENGINE = InnoDB COMMENT = '会員 : 会員テーブル' DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;



/* Create Foreign Keys */

ALTER TABLE FAVOLITE
	ADD CONSTRAINT FK_FAVOLITE_TWEET FOREIGN KEY (TWEET_ID)
	REFERENCES TWEET (TWEET_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE REPLY
	ADD CONSTRAINT FK_REPLYEE_TWEET FOREIGN KEY (REPLYEE_TWEET_ID)
	REFERENCES TWEET (TWEET_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE REPLY
	ADD CONSTRAINT FK_REPLYER_TWEET FOREIGN KEY (REPLYER_TWEET_ID)
	REFERENCES TWEET (TWEET_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE RETWEET
	ADD CONSTRAINT FK_RETWEET_TWEET FOREIGN KEY (TWEET_ID)
	REFERENCES TWEET (TWEET_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE FAVOLITE
	ADD CONSTRAINT FK_FAVOLITE_USER FOREIGN KEY (USER_ID)
	REFERENCES USER (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE FOLLOW
	ADD CONSTRAINT FK_FOLLOWEE_USER FOREIGN KEY (FOLLOWEE_ID)
	REFERENCES USER (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE FOLLOW
	ADD CONSTRAINT FK_FOLLOWER_USER FOREIGN KEY (FOLLOWER_ID)
	REFERENCES USER (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE REPLY
	ADD CONSTRAINT FK_REPLYEE_USER FOREIGN KEY (REPLYEE_ID)
	REFERENCES USER (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE REPLY
	ADD CONSTRAINT FK_REPLYER_USER FOREIGN KEY (REPLYER_ID)
	REFERENCES USER (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE RETWEET
	ADD CONSTRAINT FK_RETWEET_USER FOREIGN KEY (USER_ID)
	REFERENCES USER (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE TWEET
	ADD CONSTRAINT FK_TWEET_USER FOREIGN KEY (USER_ID)
	REFERENCES USER (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



